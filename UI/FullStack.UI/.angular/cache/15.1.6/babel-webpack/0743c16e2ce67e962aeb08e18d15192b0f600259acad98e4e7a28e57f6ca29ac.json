{"ast":null,"code":"import { HttpErrorResponse } from \"@angular/common/http\";\nimport { tap } from \"rxjs/operators\";\nimport { AuthService } from \"./auth.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class TokenInterceptorService {\n  constructor(inject, router) {\n    this.inject = inject;\n    this.router = router;\n  }\n  intercept(req, next) {\n    let authservice = this.inject.get(AuthService);\n    const token = authservice.GetToken();\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req).pipe(tap(() => {}, err => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status !== 401) {\n          return;\n        }\n        this.router.navigate(['login']);\n      }\n    }));\n  }\n}\nTokenInterceptorService.ɵfac = function TokenInterceptorService_Factory(t) {\n  return new (t || TokenInterceptorService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.Router));\n};\nTokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptorService,\n  factory: TokenInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,iBAAiB,QAA8D,sBAAsB;AAI9G,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gBAAgB;;;AAK1C,OAAM,MAAOC,uBAAuB;EAElCC,YAAoBC,MAAe,EAAUC,MAAc;IAAvC,WAAM,GAAND,MAAM;IAAmB,WAAM,GAANC,MAAM;EAAW;EAC9DC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IACjB,IAAIC,WAAW,GAAG,IAAI,CAACL,MAAM,CAACM,GAAG,CAACT,WAAW,CAAC;IAC9C,MAAMU,KAAK,GAAGF,WAAW,CAACG,QAAQ,EAAE;IACpC,IAAGD,KAAK,EACR;MACEJ,GAAG,GAAGA,GAAG,CAACM,KAAK,CAAC;QAChBC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAE;OAC7C,CAAC;;IAGJ,OAAOH,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC,CAACU,IAAI,CAAEjB,GAAG,CAAC,MAAK,CAAE,CAAC,EACzCkB,GAAQ,IAAI;MACb,IAAIA,GAAG,YAAYnB,iBAAiB,EAAE;QACpC,IAAImB,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UACvB;;QAED,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;IAEnC,CAAC,CAAC,CAAC;EAEL;;AAzBalB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAmB,SAAvBnB,uBAAuB;EAAAoB,YAFtB;AAAM","names":["HttpErrorResponse","tap","AuthService","TokenInterceptorService","constructor","inject","router","intercept","req","next","authservice","get","token","GetToken","clone","setHeaders","Authorization","handle","pipe","err","status","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\programming\\pet project\\TaskManager\\UI\\FullStack.UI\\src\\app\\services\\token-interceptor.service.ts"],"sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs/internal/Observable\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { AuthService } from \"./auth.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class TokenInterceptorService implements HttpInterceptor {\r\n  \r\n    constructor(private inject:Injector, private router: Router) {}\r\n    intercept(\r\n      req: HttpRequest<any>, \r\n      next: HttpHandler): Observable<HttpEvent<any>> {\r\n      let authservice = this.inject.get(AuthService);\r\n      const token = authservice.GetToken();\r\n      if(token)\r\n      {\r\n        req = req.clone({\r\n        setHeaders: { Authorization: `bearer ${token}`}\r\n        });\r\n      }\r\n      \r\n      return next.handle(req).pipe( tap(() => {},\r\n      (err: any) => {\r\n      if (err instanceof HttpErrorResponse) {\r\n        if (err.status !== 401) {\r\n         return;\r\n        }\r\n        this.router.navigate(['login']);\r\n      }\r\n    }));\r\n\r\n  }\r\n  }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}