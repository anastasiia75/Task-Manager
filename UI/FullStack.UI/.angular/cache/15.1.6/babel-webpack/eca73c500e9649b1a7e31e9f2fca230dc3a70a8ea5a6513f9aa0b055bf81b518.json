{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    if (this.authService.IsLoggedIn() !== true) {\n      window.alert('Access not allowed!');\n      this.router.navigate(['loginPopup']);\n    }\n    return true;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAcA,OAAM,MAAOA,SAAS;EACpBC,YAAmBC,WAAwB,EAASC,MAAc;IAA/C,gBAAW,GAAXD,WAAW;IAAsB,WAAM,GAANC,MAAM;EAAW;EAErEC,WAAW,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,UAAU,EAAE,KAAK,IAAI,EAAE;MAC1CC,MAAM,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACnC,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;IAEtC,OAAO,IAAI;EACb;;AAZWV,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAW,SAATX,SAAS;EAAAY,YAFR;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","next","state","IsLoggedIn","window","alert","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\programming\\pet project\\TaskManager\\UI\\FullStack.UI\\src\\app\\services\\auth.gard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n  CanActivate,\r\n  Router,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(public authService: AuthService, public router: Router) {}\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    if (this.authService.IsLoggedIn() !== true) {\r\n      window.alert('Access not allowed!');\r\n      this.router.navigate(['loginPopup']);\r\n    }\r\n    return true;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}